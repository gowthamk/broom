We thank the reviewers for their constructive comments and
thoughtful suggestions.

Reviewer #1:
1. The formal language uses a distinguished "open" construct for
clarity. In practice, it can be implemented via C#'s "using"
statement. Extension to syntax is not necessary. 
2. For a library method to add objects to library's cache, it has to
be called under a context that lives at least as long as the cache
itself. Type inference is capable of enforcing this condition. This
condition can be met, for example, by creating the library object in a
dynamic region, and "open"ing it to set the context everytime the
method is called.

Reviewer #2: 
1. We agree with reviewer's comparison with Cyclone; full region type
inference, a dynamic component to enforce typestate invariants, and
the OO setting are the primary distinguishing aspects.
2. We appreciate the manner in which Rust brought to bear unique
pointers and ownership types on practical systems programming.
Nonetheless, programming around Rust's borrow checker is still
considered hard for an average newcomer to Rust, as evident from the
queries on various internet forums, and acknowledged by Rust's own
documentation ("Many new users to Rust experience something we like to
call ‘fighting with the borrow checker’"). Moreover, unlike Broom,
Rust doesn't support programmer-managed dynamic memory (there is no
"free" in Rust). Unique pointers and linear typing under this general
setting can be even more restrictive than under Rust.
3. Allocations need not always happen in the top-most region. A method
can contain nested "letregion" or "open" constructs, and the language
permits the programmer to specify the region in which a new object
should be allocated. Allocation in the latest open region is used as a
default only if the programmer does not specify the region of
allocation.
4. The type inference is not global (whole program). We clarify (in
Sec.  4.4) that "although we collect constraints for the entire
program during elaboration, we solve the constraints in a
compositional fashion", thus leading to an inference algorithm that
admits separate compilation and modular reasoning. 
5. Initial versions of FB had classes parameterized on region types
(\tau), instead of regions (\rho) and types(T). Unfortunately, it was
too weak to support instance variables with region-polymorphic
function types (for eg., there do not exist \tau_1 and \tau_2 s.t.
\tau_1 -> \tau_2 is equivalent to the type <\rho> T1@\rho -> T2@\rho).
Existential types were considered briefly, but that led to a
significant additional complexity in the type system - an antithesis
to practical adoption. We finally settled on the current approach.
Supporting two kinds of parameterizations on classes should be
possible (if one doesn't mind verbose types), but we didn't pursue it
for the lack of practical motivation. 

Reviewer #3:
1. Broom's region management runtime (described in [4]) is designed to
coexist with GC. However, the formal language presented in the paper
is independent of GC.
2. We consistently distinguish between stack regions (created by
"letregion") with lexically-scoped lifetimes , and transferable
regions (created by "new", and managed by "open") with dynamic
lifetimes. The sort of interactions allowed between these two kinds of
regions are captured in Fig.2., described formally in the type rules
of "letregion" and "open", and informally in the discussion about the
type rules. Nonetheless, we agree that maybe a summary figure would've
helped. 

Reviewer #4:
1. Assuming that a language is defined by its syntax and semantics
(static and dynamic), the language Broom is indeed the contribution of
the current paper. The HotOS paper [4] does not define the Broom
language, but rather its region management runtime. The benchmarks
used in [4] were written in vanilla C# patched with a new runtime, and
come with no safety guarantees whatsoever. 
2. Broomc is an ahead-of-time compiler.

Reviewer #5:
1. Supplement includes rigorous treatment of type inference. We could
not include it in the paper due to space constraints.  
2. Note that higher-rank types do not admit principal typing. Due to
the inevitable parameterization over allocation context, every
higher-order type in FB is also a higher-rank type. So, a higher-order
type inference algorithm would still need to use heuristics even if
the approach in [14] is used to infer maximally general types. Such an
approach is more complex than our approach, but does not give any
additional theoretical guarantees.
